# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g6p1721_oT15058m9B_nQ5L3Jz9N7O5a
"""

import gradio as gr
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer
import time

# Define the model names using the user's Hugging Face links
model_name_1 = "Henry922001/en-myan-finetuned-5000"
model_name_2 = "Henry922001/en-myan-finetuned"

# Load the models and tokenizers
model_1 = AutoModelForSeq2SeqLM.from_pretrained(model_name_1)
tokenizer_1 = AutoTokenizer.from_pretrained(model_name_1)

model_2 = AutoModelForSeq2SeqLM.from_pretrained(model_name_2)
tokenizer_2 = AutoTokenizer.from_pretrained(model_name_2)


# Define the function to translate text
def translate(text, src_lang, tgt_lang, model, tokenizer):
    start_time = time.time()
    # Set the source and target language codes
    src_code = language_codes[src_lang]
    tgt_code = language_codes[tgt_lang]

    # Set the source language for the tokenizer
    tokenizer.src_lang = src_code

    # Encode the input text
    encoded_text = tokenizer(text, return_tensors="pt")

    # Generate the translation
    generated_tokens = model.generate(
        **encoded_text,
        forced_bos_token_id=tokenizer.convert_tokens_to_ids([tgt_code])[0] # Use convert_tokens_to_ids
    )

    # Decode the generated tokens
    decoded_text = tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)[0]
    end_time = time.time()
    elapsed_time = end_time - start_time
    return decoded_text, elapsed_time

# Define a function to translate text using both models in parallel
def parallel_translate(text, src_lang, tgt_lang):
    output_1, time_1 = translate(text, src_lang, tgt_lang, model_1, tokenizer_1)
    output_2, time_2 = translate(text, src_lang, tgt_lang, model_2, tokenizer_2)
    return output_1, time_1, output_2, time_2

# Define the language codes
language_codes = {
    "English": "eng_Latn",
    "Myanmar": "mya_Mymr",
}

# Define the Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("## English-Myanmar Translation with NLLB Models")
    with gr.Row():
        with gr.Column():
            input_text = gr.Textbox(label="Input Text", lines=5)
            source_language = gr.Dropdown(list(language_codes.keys()), label="Source Language", value="English")
            target_language = gr.Dropdown(list(language_codes.keys()), label="Target Language", value="Myanmar")
            translate_button = gr.Button("Translate")
        with gr.Column():
            output_text_1 = gr.Textbox(label="Translation (Model 1)", lines=5)
            time_taken_1 = gr.Textbox(label="Time Taken (Model 1)", interactive=False)
            output_text_2 = gr.Textbox(label="Translation (Model 2)", lines=5)
            time_taken_2 = gr.Textbox(label="Time Taken (Model 2)", interactive=False)

    # Define the button click event
    translate_button.click(
        parallel_translate,
        inputs=[input_text, source_language, target_language],
        outputs=[output_text_1, time_taken_1, output_text_2, time_taken_2]
    )

# Launch the Gradio interface
if __name__ == "__main__":
    demo.launch(share=True)